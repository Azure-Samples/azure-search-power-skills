{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "defaultValue": "psiav4flex",
      "metadata": { "description": "Prefix for resources (3-10 chars, lowercase letters/numbers)." },
      "minLength": 3,
      "maxLength": 10
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [ "Standard_LRS", "Standard_GRS", "Standard_ZRS", "Premium_LRS" ],
      "metadata": { "description": "Storage Account type." }
    },
    "pythonVersion": {
      "type": "string",
      "defaultValue": "3.11",
      "allowedValues": [ "3.9", "3.10", "3.11" ],
      "metadata": { "description": "Python version." }
    },
    // --- Flex Plan Scaling Parameters ---
    "functionAppScaleLimit": {
      "type": "int",
      "defaultValue": 100,
      "metadata": { "description": "Max scale-out instances." }
    },
    "minimumInstanceCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": { "description": "Min running instances." }
    },
    "instanceMemoryMB": {
      "type": "int",
      "defaultValue": 2048,
      "allowedValues": [ 2048, 4096 ],
      "metadata": { "description": "Instance memory (MB)." }
    }
  },
  "variables": {
    // --- Base Naming ---
    "storageAccountName": "[concat(toLower(parameters('resourcePrefix')), uniqueString(resourceGroup().id))]",
    "functionAppName": "[concat(parameters('resourcePrefix'), '-fn-', uniqueString(resourceGroup().id))]",
    "appServicePlanName": "[concat(parameters('resourcePrefix'), '-plan-', uniqueString(resourceGroup().id))]",
    "applicationInsightsName": "[concat(parameters('resourcePrefix'), '-ai-', uniqueString(resourceGroup().id))]",
    "deploymentStorageContainerName": "deployments", // Name for the container storing code packages

    // --- Function Config ---
    "functionWorkerRuntime": "python",
    "functionsExtensionVersion": "~4",

    // --- Managed Identity Storage URIs (Base URIs for __credential method) ---
    "storageAccountBlobServiceUri": "[concat('https://', variables('storageAccountName'), '.blob.', environment().suffixes.storage)]",
    "storageAccountQueueServiceUri": "[concat('https://', variables('storageAccountName'), '.queue.', environment().suffixes.storage)]",
    "storageAccountTableServiceUri": "[concat('https://', variables('storageAccountName'), '.table.', environment().suffixes.storage)]",
    "deploymentStorageContainerUri": "[concat(variables('storageAccountBlobServiceUri'), '/', variables('deploymentStorageContainerName'))]",

    // --- Role Definition & Assignment Variables ---
    "storageBlobDataOwnerRoleID": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
    "storageQueueDataContributorRoleID": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
    "blobOwnerRoleAssignmentName": "[guid(resourceGroup().id, variables('functionAppName'), 'BlobOwner')]",
    "queueContributorRoleAssignmentName": "[guid(resourceGroup().id, variables('functionAppName'), 'QueueContributor')]"
  },
  "resources": [
    // --- 1. Storage Account ---
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": { "name": "[parameters('storageAccountType')]" },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "defaultToOAuthAuthentication": true,
        "allowBlobPublicAccess": false
      }
    },
    // --- 1a. Deployment Storage Container ---
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}/default/{1}', variables('storageAccountName'), variables('deploymentStorageContainerName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "publicAccess": "None"
      }
    },
    // --- 2. Flex Consumption App Service Plan ---
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-12-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "sku": {
        "tier": "FlexConsumption",
        "name": "FC1"
      },
      "properties": {
        "functionAppScaleLimit": "[parameters('functionAppScaleLimit')]",
        "minimumInstanceCount": "[parameters('minimumInstanceCount')]",
        "reserved": true
      }
    },
    // --- 3. Application Insights ---
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "IngestionMode": "ApplicationInsights"
        // Consider adding: "DisableLocalAuth": true for better security
      }
    },
    // --- 4. Function App ---
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp,linux",
      "identity": { "type": "SystemAssigned" },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageAccountName'), 'default', variables('deploymentStorageContainerName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "ftpsState": "FtpsOnly",
          "alwaysOn": false,
          "appSettings": [
            // App Insights
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2020-02-02').connectionString]"
            },
            // MI Storage Settings
            {
              "name": "AzureWebJobsStorage__credential",
              "value": "managedidentity"
            },
            {
              "name": "AzureWebJobsStorage__blobServiceUri",
              "value": "[variables('storageAccountBlobServiceUri')]"
            },
            {
              "name": "AzureWebJobsStorage__queueServiceUri",
              "value": "[variables('storageAccountQueueServiceUri')]"
            },
            {
              "name": "AzureWebJobsStorage__tableServiceUri",
              "value": "[variables('storageAccountTableServiceUri')]"
            },
            // Function Runtime Settings
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "[variables('functionsExtensionVersion')]"
            },
            // Other settings
            {
              "name": "WEBSITE_CONTENTMAXIMUMSIZEMB",
              "value": "10240"
            },
            // Custom App Settings
            {
              "name": "AI_VISION_ENDPOINT",
              "value": "PLEASE_UPDATE_POST_DEPLOYMENT"
            }
          ]
        },
        "functionAppConfig": {
          "deployment": {
            "storage": {
              "type": "blobContainer",
              "value": "[variables('deploymentStorageContainerUri')]",
              "authentication": { "type": "SystemAssignedIdentity" }
            }
          },
          "runtime": {
            "name": "[variables('functionWorkerRuntime')]", // "python"
            "version": "[parameters('pythonVersion')]" // "3.11"
          },
          "scaleAndConcurrency": {
            "maximumInstanceCount": "[parameters('functionAppScaleLimit')]",
            "instanceMemoryMB": "[parameters('instanceMemoryMB')]"
          }
        }
      },
      // --- Add Basic Publishing Credentials Policies ---
      "resources": [
        {
          "type": "basicPublishingCredentialsPolicies",
          "apiVersion": "2022-09-01",
          "name": "scm",
          "dependsOn": [ "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]" ],
          "properties": { "allow": false }
        },
        {
          "type": "basicPublishingCredentialsPolicies",
          "apiVersion": "2022-09-01",
          "name": "ftp",
          "dependsOn": [ "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]" ],
          "properties": { "allow": false }
        }
      ]
    },
    // --- 5. Role Assignment: Storage Blob Data Owner ---
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('blobOwnerRoleAssignmentName')]",
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('storageBlobDataOwnerRoleID')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-12-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    // --- 6. Role Assignment: Storage Queue Data Contributor ---
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('queueContributorRoleAssignmentName')]",
      "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('storageQueueDataContributorRoleID')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-12-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "functionAppName": {
      "type": "string",
      "value": "[variables('functionAppName')]"
    },
    "functionAppPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')), '2023-12-01', 'Full').identity.principalId]",
      "metadata": { "description": "Function App MI Principal ID." }
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "deploymentStorageContainerName": {
      "type": "string",
      "value": "[variables('deploymentStorageContainerName')]"
    },
    "appSettingsNote": {
      "type": "string",
      "value": "ACTION REQUIRED: Update 'AI_VISION_ENDPOINT' setting."
    },
    "deploymentNote": {
      "type": "string",
      "value": "ACTION REQUIRED: Deploy function code separately (e.g., 'az functionapp deploy')."
    }
  }
}